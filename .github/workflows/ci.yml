name: CI

on:
  push:
    branches: [main]
  pull_request:
    name: CI

    on:
      push:
        name: CI

        on:
          push:
            branches: [main]
          pull_request:
            branches: [main]
          workflow_dispatch:

        jobs:
          build:
            name: Tests
            runs-on: ubuntu-latest
            steps:
              - name: Checkout
                uses: actions/checkout@v4

              - name: Set up Go
                uses: actions/setup-go@v4
                with:
                  go-version: '1.22'

              - name: Install deps
                run: go mod download

              - name: Run go vet
                name: CI

                on:
                  push:
                    branches: [main]
                  pull_request:
                    branches: [main]
                  workflow_dispatch:

                jobs:
                  build:
                    name: Tests
                    runs-on: ubuntu-latest
                    steps:
                      - name: Checkout
                        uses: actions/checkout@v4

                      - name: Set up Go
                        uses: actions/setup-go@v4
                        with:
                          go-version: '1.22'

                      - name: Install deps
                        run: go mod download

                      - name: Run go vet
                        run: go vet ./...

                      - name: Run gofmt check
                        run: |
                          test -z "$(gofmt -l .)" || (echo "Run 'gofmt -w .'" && exit 1)

                      - name: Run tests
                        run: go test ./... -race -v

                  docker-smoke:
                    name: Docker smoke test
                    runs-on: ubuntu-latest
                    needs: build
                    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
                    steps:
                      - name: Checkout
                        uses: actions/checkout@v4

                      - name: Set up QEMU
                        uses: docker/setup-qemu-action@v2

                      - name: Set up Buildx
                        uses: docker/setup-buildx-action@v3

                      - name: Build image (distroless target)
                        uses: docker/build-push-action@v5
                        with:
                          push: false
                          tags: task-manager-api:ci
                          file: ./Dockerfile
                          target: runtime-distroless
                          platforms: linux/amd64
                          load: true

                      - name: Run container
                        run: |
                          docker run -d --name task-api-ci -p 8080:8080 -e PORT=8080 task-manager-api:ci
                          sleep 3

                      - name: Install jq
                        run: sudo apt-get update && sudo apt-get install -y jq

                      - name: Smoke: healthz
                        run: |
                          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz || true)
                          echo "healthz: $STATUS"
                          if [ "$STATUS" != "200" ]; then
                            docker logs task-api-ci || true
                            exit 1
                          fi

                      - name: Smoke: create/idempotency/fetch
                        run: |
                          set -euo pipefail
                          CREATE_OUT=$(curl -s -X POST localhost:8080/tasks \
                            -H 'Content-Type: application/json' \
                            -H 'Idempotency-Key: ci-key-1' \
                            -d '{"type":"echo","payload":{"msg":"ci-smoke"}}')
                          echo "CREATE_OUT: $CREATE_OUT"
                          ID1=$(echo "$CREATE_OUT" | jq -r .id)
                          CREATE_OUT2=$(curl -s -X POST localhost:8080/tasks \
                            -H 'Content-Type: application/json' \
                            -H 'Idempotency-Key: ci-key-1' \
                            -d '{"type":"echo","payload":{"msg":"ci-smoke"}}')
                          ID2=$(echo "$CREATE_OUT2" | jq -r .id)
                          echo "ID1=$ID1 ID2=$ID2"
                          if [ -z "$ID1" ] || [ "$ID1" != "$ID2" ]; then
                            echo "idempotency mismatch or empty id"
                            docker logs task-api-ci || true
                            exit 1
                          fi
                          TASK_JSON=$(curl -s localhost:8080/tasks/$ID1 || true)
                          echo "TASK_JSON: $TASK_JSON"

                      - name: Tear down
                        if: always()
                        run: |
                          docker stop task-api-ci || true
                          docker rm task-api-ci || true

                      - name: Collect logs
                        if: always()
                        run: |
                          docker logs task-api-ci > smoke_logs.txt || true

                      - name: Upload smoke logs
                        if: always()
                        uses: actions/upload-artifact@v4
                        with:
                          name: smoke-logs
                          path: smoke_logs.txt
